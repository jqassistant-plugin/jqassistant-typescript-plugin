{"development/Codebase-Layout":{"title":"Codebase Layout","links":["development/Concepts","development/Post-Processors","development/Processors","development/Traversers","development/Utilities","usage/React-Extension"],"tags":[],"content":"Codebase Layout\nThe codebase of the plugin is structured the following way:\n\ndocs/: contains the documentation you’re reading right now\njava/: contains the Java-based jQA-Plugin\n\nsrc/main/: implementation of the jQA-Plugin\n\no.j.p.t.api: TypeScriptScope and all Descriptor interfaces\no.j.p.t.impl\n\nfilesystem: custom Implementation of the file resolver\nmapper: MapStruct-based mappers and resolvers for POJO-to-Descriptor Mappings (contains main logic of the plugin)\nmodel: POJOs that model the JSON output of the LCE tool\n\n\n\n\nsrc/test/: integration tests for the jQA-Plugin\n\nuse the regenerate-test-data.sh under src/test/resources to generate test reports with the current TypeScript LCE implementation\n\n\n\n\ntypescript/: contains the implementation and tests for the TypeScript LCE tool\n\nsrc/: implementation of the LCE tool\n\ncore/: code for the LCE framework and all core language features\n\nconcepts/: concept implementations\npost-processors/: post-processor implementations\nprocessors/: processor implementations\ntraversers/: traverser implementations\nutils/: various utility functions, etc.\nthe .ts files directly contained in this directory model the LCE framework\n\n\nreact/: code for the React Extension\n… directories for future extensions\nmain.ts: contains entry point of the tool that parses the CLI arguments and initializes the extensions\n\n\ntest/: tests for the LCE tool\n\n\n"},"development/Concepts":{"title":"Concepts","links":[],"tags":[],"content":"Concepts\n→ classes representing LCE language concepts\n\nlocated in typescript/src/core/concepts\n\nall files end with .concept.ts\nmay export one or more concept classes each\n\n\n\nNotes for creating new concept classes:\n\neach concept class must (indirectly) inherit from LCEConcept/LCENamedConcept\neach concept class must override the static conceptId field with a unique string identifier\nuse CodeCoordinates class as field type to encode code coordinates\nall type and value concepts are located in type.concept.ts and value.concept.ts respectively\n\nConceptMap:\n\nConcept Maps are realized in their more complex form, integrating parent property names into their index structure\nuse mergeConceptMaps, unifyConceptMap, singleEntryConceptMap, createConceptMap, and getAndCastConcepts utility functions for the concise management of ConceptMap instances\n"},"development/Extensions":{"title":"Extensions","links":["development/Concepts","development/Traversers","development/Processors","development/Post-Processors"],"tags":[],"content":"Extensions\n→ besides the core language structures, Extensions can be used to implement optional, technology-specific scanning/processing components (i.e. concepts, traversers, processors, or post-processors and the concept representations in the jQA Plugin)\nLCE:\n\ncomponents for each extension is placed in a separate sub-directory in under typescript/src (e.g. typescript/src/react)\neach extension contains a main module called extension-name-extractor.ts that exports a function that adds all processing components of the extension to the feature collections in typescript/src/core/features.ts\ntypescript/src/main.ts must be extended to allow the extension to be activated and initialized\nall processing components are defined in the same manner and directory structure as their core counterparts\n\njQA Plugin:\n\neach of the technical packages contains sub-packages for the core and each individual extension\nthe ConceptCollection class has to accommodate all possible concept types that can be emitted by the LCE tool\n"},"development/Extraction-Strategy---Overview":{"title":"Extraction Strategy - Overview","links":[],"tags":[],"content":"Extraction Strategy: Overview\n→ the extraction of language concepts is achieved by an implementation of the LCE Architecture\n\nthe main source of information for extracting concepts from TS source code is the ESLint AST (provided through @typescript-eslint/typescript-estree)\n\nuse ESLint Playground to easily explore the data structures\n\n\nall concepts have to be extracted within a single traversal of the ESLint AST\n\nseparate/additional sub-tree traversals are not allowed\n\n\nadditional information, mostly related to types, is extracted via the native TypeScript Compiler API (for more information see here and here), especially the TypeChecker\n\ndirect translation between nodes of the two different ASTs can easily be done via the services global context\nthe Compiler API should be used sparingly, as it is less developer-friendly than the ESLint API\n\n\n"},"development/Local-Contexts":{"title":"Local Contexts","links":["development/Processors"],"tags":[],"content":"Local Contexts\n→ Local Contexts are implemented by the LocalContexts class\n\nlocated under typescript/src/core/context.ts\n\nGeneral Usage Rules:\n\nchild node processors should know as little as possible about their parents and should instead receive their information for execution conditions and concept extraction from local contexts (→ increase re-usability)\nthe context keys are stored in a central class that is specific for each extension (e.g. CoreContextKeys and ReactContextKeys) that is located in an extension-level module named context.keys.ts\n"},"development/Post-Processors":{"title":"Post-Processors","links":[],"tags":[],"content":"Post-Processors\n→ classes representing LCE post-processors\n\nlocated in typescript/src/core/post-processors\n\nall files end with .post-processor.ts\nmay export one or more concept classes each\n\n\n\nNotes for creating new post-processor classes:\n\neach post-processor class must inherit from PostProcessor and implement the postProcess method\nall post-processors need to be registered in the POST_PROCESSORS feature collection in features.ts\n\nbefore implementing a new post-processor check if there already exists one that could be modified to also solve the problem at hand\n\n\n"},"development/Processors":{"title":"Processors","links":[],"tags":[],"content":"Processors\n→ classes representing LCE Processors\n\nlocated in typescript/src/core/processors\n\nall files end with .processor.ts\nmay export one or more processor classes each\n\n\n\nNotes for creating new processors:\n\neach processor class must inherit from Processor\n\nonly the executionCondition has to be specified\npreChildrenProcessing and postChildrenProcessing methods have empty default implementations and can be overridden as needed\n\n\nuse CodeCoordinateUtils to retrieve code coordinates from an ESLint node\nuse functions of processor.utils.ts for easier handling of the used data structures\nuse utility functions fromtype.utils.ts to process type information\n"},"development/Traversers":{"title":"Traversers","links":[],"tags":[],"content":"Traversers\n→ LCE traversers are implemented as a modified visitor pattern\n\nThe abstract Traverser base class provides the implementation that orchestrates the execution of the other components\n\nonly the traverseChildren method that delegates the traversal of potential child nodes to other traversers is abstract and has to be implemented by sub types\n\n\nfor each AST node type (provided via @typescript-eslint/utils) that should be processed, a separate Traverser implementation has to be provided\n\nnote that skipping nodes in the ESLint AST through a simplified Traverser implementation (e.g. via nested node access: runTraverserForNodes(node.body.body, ...)) must be avoided as it leads to an incorrectly set parent property on the traversed child nodes\n\n\nall traverser implementations are located under typescript/src/core/traversers\n\nall files end with .traverser.ts\nmay export one or more traverser classes each\n\n\n\nNotes for creating new traversers:\n\neach traverser class must inherit from Traverser\nall traversers need to be registered in the TRAVERSERS feature collection in features.ts\n\nbefore implementing a new traverser check if there already exists one in the collection\nexisting traversers may not trigger the traversal for all their child nodes: expand where needed\nfor nodes that don’t have any children that should be traversed the SimpleTraverser default implementation can be specified in TRAVERSERS for the corresponding node type\n\n\nuse runTraverserForNode(s) utility function to easily delegate the traversal process\nparent property names should be declared as public static readonly members of the implementing class\n"},"development/Utilities":{"title":"Utilities","links":["development/Processors","development/Traversers"],"tags":[],"content":"Utilities\n→ there exist various utility modules in the TypeScript LCE to aid development\nOverview:\n\nFileUtils: operations with files, directories and their paths\n\nmainly used for normalizing file system paths to consistently use forward slashes (normalizePath)\n\n\nModulePathUtils: operations on FQNs and the module paths contained within them\nNodeUtils: operations to call on Node-specific APIs for package name resolution, etc.\nprocessor.utils.ts: provides various functions to be used by processors for easy access to the various processed data structures\ntraverser.utils.ts: provides functions to be used by traversers to better orchestrate the traversal process\nProjectUtils: contains logic for project detection and information extraction\n"},"index":{"title":"jQAssistant TypeScript Plugin","links":["usage/Installation","usage/Basic-Usage","usage/Node---TS-Project","usage/Node---TS-Module","usage/Node---TS-ExternalModule","usage/Node---TS-ExternalDeclaration","usage/Node---TS-TypeAlias","usage/Node---TS-Class","usage/Node---TS-Interface","usage/Node---TS-Enum","usage/Node---TS-Function","usage/Node---TS-Variable","usage/Node---TS-Type","usage/Node---TS-Value","usage/Node-Properties---Fully-Qualified-Names","usage/Node-Relation---Dependencies","usage/Node-Properties---Code-Coordinates","usage/React-Extension","development/Codebase-Layout","development/Extensions","development/Concepts","development/Traversers","development/Processors","development/Post-Processors","development/Local-Contexts","development/Utilities","development/Extraction-Strategy---Overview"],"tags":[],"content":"jQAssistant TypeScript Plugin\nThis is the TypeScript plugin for jQAssistant.\nUsage\n\nInstallation\nBasic Usage\n\nCore Graph Structure:\n→ the core model represents all basic TypeScript language concepts, independent of any used frameworks or libraries\n\n\nProject Nodes:\n\n:TS:Project\n:TS:Module\n:TS:ExternalModule and :TS:ExternalDeclaration\n\n\nDeclaration Nodes:\n\n:TS:TypeAlias\n:TS:Class\n:TS:Interface\n:TS:Enum\n:TS:Function\n:TS:Variable\n\n\nType Nodes: :TS:Type\nValue Nodes: :TS:Value\nAuxiliary Concepts and Patterns:\n\nFully Qualified Names (FQNs)\nDependencies\nCode Coordinates\n\n\n\nExtensions:\n\nReact Extension\n\nSupport\nThis plugin should be largely compatible with all versions of TypeScript.\nHowever, it is only developed and tested against the current version (5.x) of TypeScript.\nThe tool currently only supports projects using ECMAScript modules.\nCurrently not supported:\n\nold CommonJS module syntax\ntriple-slash directives\n\nDevelopment\nThis plugin is based on the LCE Architecture.\n\nCodebase Layout\nExtensions\n\nBase LCE Architecture Implementation:\n\nConcepts\nTraversers\nProcessors\nPost-Processors\nLocal Contexts\nUtilities\n\nExtraction Strategies:\n\nOverview\n"},"usage/Basic-Usage":{"title":"Basic Usage","links":["usage/Installation","usage/Node---TS-Project"],"tags":[],"content":"Basic Usage\n\ngo through the installation and project setup process\nif not done already, run npm install to completely download all dependencies\nexecute jqa-ts-lce(global installation) or npm run jqa(local installation) from the directory that contains your project(s) (this will generate a file .reports/jqa/ts-output.json)\n\nuse --help option to show available options for the command (when using local installation, options have to be specified in the package.json)\n\n\nrun the jQAssistant command line utility using directory/to/jqa-cli/bin/jqassistant.sh scan (imports .reports/jqa/ts-output.json into the graph database)\n\nPossible Use Cases:\n\nanalyze the graph and report violations via directory/to/jqa-cli/bin/jqassistant.sh analyze and directory/to/jqa-cli/bin/jqassistant.sh report\nstart exploring the graph by starting the embedded server directory/to/jqa-cli/bin/jqassistant.sh server and opening your browser at http://localhost:7474\n\nProject and Directory Structure:\n\nthe directory provided to the language concept extractor is scanned for TypeScript projects\n\nprojects may be nested and/or referenced\n\n\n\n\nall scanned files and directories are represented by :File:Local nodes that hold an absolute path (absoluteFileName) and optionally a path relative to the root of the containing :TS:Project (fileName)\n\nall directories also have the additional label :Directory\nall scanned files and directories share a common tree of nodes (the root of this tree represents the system root directory, i.e. / or C:\\)\nNOTE: only the directory provided to the language concept extractor is fully traversed\n\n\n"},"usage/Installation":{"title":"Installation","links":["usage/Basic-Usage"],"tags":[],"content":"Installation\n1. jQA CLI Installation\n\nDownload the ZIP-distribution of the jQAssistant command line utility (Neo4j 4 or Neo4j 5) and unpack it\n\n2. npm LCE Tool Installation\nGlobal Installation:\n\nrun npm install --global  @jqassistant/ts-lce\n\nLocal Installation:\n\nRun npm install --save-dev  @jqassistant/ts-lce\nAdd the following section to the package.json (add additional options as needed)\n&quot;scripts&quot;: {  \n    &quot;jqa&quot;: &quot;jqa-ts-lce&quot;  \n}\n\n\n3. Project Setup\n\ncreate a .jqassistant.yml file in the directory that contains your project(s)\njqassistant:\n  plugins:\n    - group-id: org.jqassistant.plugin.typescript\n      artifact-id: jqassistant-typescript-plugin\n      version: 1.2.0\n  scan:\n    include:\n      files:\n\t    - typescript:project::build/jqa-ts-output.json\n\nfor the most recent versions of the plugin see the Maven\n\n\n\n\n\n                  \n                  NOTE\n                  \n                \nFrom version 1.2.0 onward, the version of the @jqassistant/ts-lce Node package and the version of the jQA plugin have to match to avoid incompatibility issues.\n\n\nto exclude unwanted scans of directories like node_modules you can exclude them in the jqassistant.yml:\njqassistant:\n  scan:\n\tproperties:\n\t  file.exclude:\n\t\t- /node_modules/**\n\t\t- /dist/**\n\t\t- /jqassistant/**\n\n\n\nsee Basic Usage for more details on how to run the tool\n"},"usage/Node---TS-AccessorProperty":{"title":"Node - TS AccessorProperty","links":["usage/Node---TS-Class","usage/Node---TS-Interface","usage/Node-Properties---Fully-Qualified-Names","usage/Node---TS-AutoAccessor","usage/Node---TS-Getter","usage/Node---TS-Setter","usage/Node-Relation---Dependencies"],"tags":[],"content":":TS:AccessorProperty Node\n→ represents a property of a :TS:Class or :TS:Interface that is described by getter, setter, or auto accessor constructs\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionglobalFqnglobal FQN of the accessor propertylocalFqnlocal FQN of the accessor propertynamename of the accessor property\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionDESCRIBED_BY_AUTO_ACCESSOR:TS:AutoAccessor0..1auto accessor that describes the propertyDESCRIBED_BY_GETTER:TS:Getter0..1getter that describes the propertyDESCRIBED_BY_SETTER:TS:Setter0..1setter that describes the propertyDEPENDS_ONsee DEPENDS_ON - Target Nodes0..*dependencies of all describing accessors"},"usage/Node---TS-AutoAccessor":{"title":"Node - TS AutoAccessor","links":["usage/Node---TS-Class","usage/Node---TS-Interface","usage/Node-Properties---Code-Coordinates","usage/Node---TS-Type","usage/Node---TS-Decorator"],"tags":[],"content":":TS:AutoAccessor Node\n→ represents a declared auto accessor of a :TS:Class or :TS:Interface\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionvisibilityvisibility of the accessor, i.e. public(default), protected, private, or js_private(for auto accessors declared using the # prefix)static (boolean)only for :TS:Class accessors: indicates, if the accessor has an static modifierabstract (boolean)only for :TS:Class accessors: indicates, if the accessor has an abstract modifieroverride (boolean)only for :TS:Class accessors: indicates, if the accessor has an override modifiercode coordinatescode coordinates of the auto accessor declaration (without fileName)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionOF_TYPE:TS:Type1type of the described accessor propertyDECORATED_BY:TS:Decorator0..*only for :TS:Class accessors: all decorators of the described accessor property"},"usage/Node---TS-Class":{"title":"Node - TS Class","links":["usage/Node-Properties---Fully-Qualified-Names","usage/Node-Properties---Code-Coordinates","usage/Node---TS-TypeParameter","usage/Node---TS-Type-Declared","usage/Node---TS-Constructor","usage/Node---TS-Property","usage/Node---TS-Method","usage/Node---TS-AccessorProperty","usage/Node---TS-Decorator","usage/Node-Relation---Dependencies"],"tags":[],"content":":TS:Class Node\n→ represents a top-level TypeScript class declaration\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionglobalFqnglobal FQN of the classlocalFqnlocal FQN of the classnamename of the classabstract (boolean)indicates, if the class has an abstract modifiercode coordinatescode coordinates of the class declaration (includes fileName)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionDECLARES:TS:TypeParameter0..*type parameters that are declared by the classEXTENDS:TS:Type:Declared0..1type reference to the base classIMPLEMENTS:TS:Type:Declared0..*type reference to all implemented interfacesDECLARES:TS:Constructor0..1the constructor of the classDECLARES:TS:Property:TS:Method:TS:AccessorProperty0..*all declared members of the classDECORATED_BY:TS:Decorator0..*all decorators of the class declarationDEPENDS_ONsee DEPENDS_ON - Target Nodes0..*dependencies of the class"},"usage/Node---TS-Constructor":{"title":"Node - TS Constructor","links":["usage/Node-Properties---Fully-Qualified-Names","usage/Node-Properties---Code-Coordinates","usage/Node---TS-Parameter"],"tags":[],"content":":TS:Constructor Node\n→ represents a TypeScript class constructor declaration\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionglobalFqnglobal FQN of the constructor (always ends with .constructor)localFqnlocal FQN of the constructor (always ends with .constructor)code coordinatescode coordinates of the constructor declaration (without fileName)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionHAS:TS:Parameter0..*parameters of the constructor (may reference declared parameter properties)"},"usage/Node---TS-Decorator":{"title":"Node - TS Decorator","links":["usage/Node-Properties---Code-Coordinates","usage/Node---TS-Value"],"tags":[],"content":":TS:Decorator Node\n→ represents a decorator of a declaration\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptioncode coordinatescode coordinates of the decorator (without fileName)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionHAS_VALUE:TS:Value1value representing the decorator"},"usage/Node---TS-Enum":{"title":"Node - TS Enum","links":["usage/Node-Properties---Fully-Qualified-Names","usage/Node-Properties---Code-Coordinates","usage/Node---TS-EnumMember","usage/Node-Relation---Dependencies"],"tags":[],"content":":TS:Enum Node\n→ represents a top-level TypeScript enum declaration\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionglobalFqnglobal FQN of the enumlocalFqnlocal FQN of the enumnamename of the enumconstant (boolean)indicates, if the enum has a const modifierdeclared (boolean)indicates, if the enum has a declare modifiercode coordinatescode coordinates of the enum declaration (includes fileName)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionDECLARES:TS:EnumMember0..*all elements of the enumDEPENDS_ONsee DEPENDS_ON - Target Nodes0..*dependencies of the enum"},"usage/Node---TS-EnumMember":{"title":"Node - TS EnumMember","links":["usage/Node-Properties---Fully-Qualified-Names","usage/Node-Properties---Code-Coordinates","usage/Node---TS-Value"],"tags":[],"content":":TS:EnumMember Node\n→ represents a TypeScript enum element\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionglobalFqnglobal FQN of the enum memberlocalFqnlocal FQN of the enum membernamename of the enum membercode coordinatescode coordinates of the enum member (without fileName)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionINITIALIZED_WITH:TS:Value0..1explicitly assigned value of the enum member"},"usage/Node---TS-ExternalDeclaration":{"title":"Node - TS ExternalDeclaration","links":["usage/Node---TS-Project","usage/Node---TS-ExternalModule","usage/Node-Properties---Fully-Qualified-Names"],"tags":[],"content":":TS:ExternalDeclaration Node\n→ some kind of declaration (variable, function, class, type, etc.) that is not directly part of a scanned :TS:Project\n\nalways declared in the context of a :TS:ExternalModule\n\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionglobalFqnglobal FQN of the external declaration"},"usage/Node---TS-ExternalModule":{"title":"Node - TS ExternalModule","links":["usage/Node---TS-Project","usage/Node-Properties---Fully-Qualified-Names","usage/Node---TS-ExternalDeclaration"],"tags":[],"content":":TS:ExternalModule Node\n→ represents a TypeScript module that is not directly part of a scanned :TS:Project\n\nusually parts of imported Node.js libraries, etc.\n\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionglobalFqnglobal FQN of the external module (either absolute path to the source or name of the Node.js package)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionEXPORTS:TS:ExternalDeclaration0..*declarations of the external module that are used somewhere in the scanned project modulesProperties: - exportedName: name of the declaration"},"usage/Node---TS-Function":{"title":"Node - TS Function","links":["usage/Node---TS-Type-Function","usage/Node-Properties---Fully-Qualified-Names","usage/Node-Properties---Code-Coordinates","usage/Node---TS-TypeParameter","usage/Node---TS-Type","usage/Node---TS-Parameter","usage/Node-Relation---Dependencies"],"tags":[],"content":":TS:Function Node\n→ represents a top-level TypeScript function declaration\n\nnot to be confused with :TS:Type:Function, which represents a function type\n\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionglobalFqnglobal FQN of the functionlocalFqnlocal FQN of the functionnamename of the functionasync (boolean)indicates, if the function has an async modifiercode coordinatescode coordinates of the function declaration (includes fileName)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionDECLARES:TS:TypeParameter0..*type parameters that are declared by the functionRETURNS:TS:Type1return type of the functionHAS:TS:Parameter0..*parameters of the functionDEPENDS_ONsee DEPENDS_ON - Target Nodes0..*dependencies of the function"},"usage/Node---TS-Getter":{"title":"Node - TS Getter","links":["usage/Node---TS-Class","usage/Node---TS-Interface","usage/Node-Properties---Code-Coordinates","usage/Node---TS-Type","usage/Node---TS-Decorator"],"tags":[],"content":":TS:Getter Node\n→ represents a declared getter of a :TS:Class or :TS:Interface\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionvisibilityvisibility of the getter, i.e. public(default), protected, private, or js_private(for getters declared using the # prefix)static (boolean)only for :TS:Class getters: indicates, if the getter has an static modifierabstract (boolean)only for :TS:Class getters: indicates, if the getter has an abstract modifieroverride (boolean)only for :TS:Class getters: indicates, if the getter has an override modifiercode coordinatescode coordinates of the getter declaration (without fileName)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionRETURNS:TS:Type1return type of the getterDECORATED_BY:TS:Decorator0..*only for :TS:Class getters: all decorators of the getter"},"usage/Node---TS-Interface":{"title":"Node - TS Interface","links":["usage/Node-Properties---Fully-Qualified-Names","usage/Node-Properties---Code-Coordinates","usage/Node---TS-TypeParameter","usage/Node---TS-Type-Declared","usage/Node---TS-Property","usage/Node---TS-Method","usage/Node---TS-AccessorProperty","usage/Node-Relation---Dependencies"],"tags":[],"content":":TS:Interface Node\n→ represents a top-level TypeScript interface declaration\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionglobalFqnglobal FQN of the interfacelocalFqnlocal FQN of the interfacenamename of the interfacecode coordinatescode coordinates of the interface declaration (includes fileName)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionDECLARES:TS:TypeParameter0..*type parameters that are declared by the interfaceEXTENDS:TS:Type:Declared0..*type reference to the base interface(s)DECLARES:TS:Property:TS:Method:TS:AccessorProperty0..*all declared members of the interfaceDEPENDS_ONsee DEPENDS_ON - Target Nodes0..*dependencies of the interface"},"usage/Node---TS-JSXElementType":{"title":"Node - TS JSXElementType","links":["usage/Node-Properties---Fully-Qualified-Names","usage/Node---TS-ReactComponent","usage/Node-Relation---Dependencies"],"tags":[],"content":":TS:JSXElementType Node\n→ represents an element type that is used as a JSX element\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionglobalFqnglobal FQN of the element (either equal to the global FQN of a referenced :TS:ReactComponent, or equal to name for native HTML elements)namename of the element\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionREFERENCES:TS:ReactComponent0..1React component that represents the used elementDEPENDS_ONsee DEPENDS_ON - Target Nodes0..*dependencies of the element (any referenced declaration)"},"usage/Node---TS-Method":{"title":"Node - TS Method","links":["usage/Node---TS-Class","usage/Node---TS-Interface","usage/Node-Properties---Fully-Qualified-Names","usage/Node-Properties---Code-Coordinates","usage/Node---TS-TypeParameter","usage/Node---TS-Type","usage/Node---TS-Parameter","usage/Node---TS-Decorator","usage/Node-Relation---Dependencies"],"tags":[],"content":":TS:Method Node\n→ represents a declared method of a :TS:Class or :TS:Interface\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionglobalFqnglobal FQN of the methodlocalFqnlocal FQN of the methodnamename of the methodvisibilityvisibility of the method, i.e. public(default), protected, private, or js_private(for methods declared using the # prefix)async (boolean)indicates, if the method has an async modifierstatic (boolean)only for :TS:Class properties: indicates, if the method has an static modifierabstract (boolean)only for :TS:Class properties: indicates, if the method has an abstract modifieroverride (boolean)only for :TS:Class properties: indicates, if the method has an override modifiercode coordinatescode coordinates of the method declaration (without fileName)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionDECLARES:TS:TypeParameter0..*type parameters that are declared by the methodRETURNS:TS:Type1return type of the methodHAS:TS:Parameter0..*parameters of the methodDECORATED_BY:TS:Decorator0..*only for :TS:Class methods: all decorators of the methodDEPENDS_ONsee DEPENDS_ON - Target Nodes0..*dependencies of the method"},"usage/Node---TS-Module":{"title":"Node - TS Module","links":["usage/Node---TS-Project","usage/Node-Properties---Fully-Qualified-Names","usage/Node---TS-TypeAlias","usage/Node---TS-Class","usage/Node---TS-Interface","usage/Node---TS-Enum","usage/Node---TS-Function","usage/Node---TS-Variable","usage/Node-Relation---Dependencies"],"tags":[],"content":":TS:Module Node\n→ represents a TypeScript module (a single .ts(x) file)\n\nis realized as an extension of the matching :File:Local node\n\nfileName is relative to the :TS:Project root directory\n\n\n\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionglobalFqnglobal FQN of the module (absolute file path identical to absoluteFileName)localFqnlocal FQN of the module (relative file path identical to fileName)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionDECLARES:TS:TypeAlias:TS:Class:TS:Interface:TS:Enum:TS:Function:TS:Variable0..*all global declarations of the moduleEXPORTS:TS:TypeAlias:TS:Class:TS:Interface:TS:Enum:TS:Function:TS:Variable0..*additional relation to all global declarations that are exported by the moduleProperties:- exportedName: name of the declaration under which it is exportedDEPENDS_ONsee DEPENDS_ON - Target Nodes0..*dependencies of the module"},"usage/Node---TS-Parameter":{"title":"Node - TS Parameter","links":["usage/Node---TS-Type-FunctionParameter","usage/Node---TS-Type-Function","usage/Node-Properties---Code-Coordinates","usage/Node---TS-Type","usage/Node---TS-Property","usage/Node---TS-Constructor","usage/Node---TS-Decorator","usage/Node---TS-Class"],"tags":[],"content":":TS:Parameter Node\n→ represents a function/method parameter\n\nnot to be confused with :TS:Type:FunctionParameter which is exclusive for :TS:Type:Function\n\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionindexposition of the parameter in the parameter list (zero-based)namename of the parameteroptional (boolean)indicates if the parameter is marked optionalcode coordinatescode coordinates of the parameter declaration (without fileName)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionOF_TYPE:TS:Type1type of the parameterDECLARES:TS:Property0..1only for :TS:Constructor parameters: reference to the declared parameter propertyDECORATED_BY:TS:Decorator0..*only for :TS:Class member parameters: all decorators of the parameter"},"usage/Node---TS-Project":{"title":"Node - TS Project","links":["usage/Node---TS-Project","usage/Node---TS-Module","usage/Node---TS-ExternalModule"],"tags":[],"content":":TS:Project Node\n→ represents an individual TypeScript project\n\nidentified via a tsconfig.json file\n\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionHAS_CONFIGFile:Local1tsconfig.json file nodeHAS_ROOTFile:Local1either the directory of the tsconfig.json or the rootDir path, if it is located above the tsconfig.json pathREFERENCES:TS:Project0..*sub-projects as they are defined via the references tsconfig.json propertyCONTAINS:TS:Module0..*all scanned modules that are contained within the project (does not include modules of referenced sub-projects)USES:TS:ExternalModule0..*all external modules that are referenced somewhere inside the scanned project modules"},"usage/Node---TS-Property":{"title":"Node - TS Property","links":["usage/Node---TS-Class","usage/Node---TS-Interface","usage/Node-Properties---Fully-Qualified-Names","usage/Node-Properties---Code-Coordinates","usage/Node---TS-Type","usage/Node---TS-Decorator","usage/Node-Relation---Dependencies"],"tags":[],"content":":TS:Property Node\n→ represents a declared property of a :TS:Class or :TS:Interface\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionglobalFqnglobal FQN of the propertylocalFqnlocal FQN of the propertynamename of the propertyoptional (boolean)indicates, if the property has been declared optional/nullable via a ? suffixreadonly (boolean)indicates, if the property has a readonly modifiervisibilityvisibility of the property, i.e. public(default), protected, private, or js_private(for properties declared using the # prefix)static (boolean)only for :TS:Class properties: indicates, if the property has an static modifierabstract (boolean)only for :TS:Class properties: indicates, if the property has an abstract modifieroverride (boolean)only for :TS:Class properties: indicates, if the property has an override modifiercode coordinatescode coordinates of the property declaration (without fileName)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionOF_TYPE:TS:Type1type of the propertyDECORATED_BY:TS:Decorator0..*only for :TS:Class properties: all decorators of the propertyDEPENDS_ONsee DEPENDS_ON - Target Nodes0..*dependencies of the property"},"usage/Node---TS-ReactComponent":{"title":"Node - TS ReactComponent","links":["usage/Node---TS-Class","usage/Node---TS-Function","usage/Node---TS-Variable","usage/Node---TS-JSXElementType"],"tags":[],"content":":TS:ReactComponent Node\n→ represents a React component definition\n\nacts as an extension to either a :TS:Class, :TS:Function, or :TS:Variable node\n\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptioncomponentNamename of the component\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionRENDERS:TS:JSXElementType0..*elements/components that are used (and potentially rendered) by the componentProperties:- cardinality: number of usages inside the component"},"usage/Node---TS-Setter":{"title":"Node - TS Setter","links":["usage/Node---TS-Class","usage/Node---TS-Interface","usage/Node-Properties---Code-Coordinates","usage/Node---TS-Parameter","usage/Node---TS-Decorator"],"tags":[],"content":":TS:Setter Node\n→ represents a declared setter of a :TS:Class or :TS:Interface\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionvisibilityvisibility of the setter, i.e. public(default), protected, private, or js_private(for setters declared using the # prefix)static (boolean)only for :TS:Class setters: indicates, if the setter has an static modifierabstract (boolean)only for :TS:Class setters: indicates, if the setter has an abstract modifieroverride (boolean)only for :TS:Class setters: indicates, if the setter has an override modifiercode coordinatescode coordinates of the setter declaration (without fileName)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionHAS:TS:Parameter0..*parameter(s) of the setterDECORATED_BY:TS:Decorator0..*only for :TS:Class setters: all decorators of the setter"},"usage/Node---TS-Type-Declared":{"title":"Node - TS Type Declared","links":["usage/Node---TS-Class","usage/Node-Properties---Fully-Qualified-Names","usage/Node---TS-Interface","usage/Node---TS-TypeAlias","usage/Node---TS-Enum","usage/Node---TS-ExternalDeclaration","usage/Node---TS-Type"],"tags":[],"content":":TS:Type:Declared Node\n→ represents the type of a type declaration (i.e. a :TS:Class)\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionreferencedGlobalFqnglobal FQN of the type declaration that is referenced by the type node (this mainly serves as a convenience property to simplify queries)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionREFERENCES:TS:Class:TS:Interface:TS:TypeAlias:TS:Enum:TS:ExternalDeclaration1declaration that defines the referenced typeHAS_TYPE_ARGUMENT:TS:Type0..*type arguments that are specified for generic typesProperties: - index: position of the type argument in the type parameter list (zero-based)"},"usage/Node---TS-Type-Function":{"title":"Node - TS Type Function","links":["usage/Node---TS-TypeParameter","usage/Node---TS-Type","usage/Node---TS-Type-FunctionParameter"],"tags":[],"content":":TS:Type:Function Node\n→ represents a function type\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionasync (boolean)indicates, if the function type has an async modifier\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionDECLARES:TS:TypeParameter0..*type parameters that are declared by the function typeRETURNS:TS:Type1return type of the function typeHAS_PARAMETER:TS:Type:FunctionParameter0..*parameters of the function type"},"usage/Node---TS-Type-FunctionParameter":{"title":"Node - TS Type FunctionParameter","links":["usage/Node---TS-Type-Function","usage/Node---TS-Parameter","usage/Node---TS-Function","usage/Node---TS-Type"],"tags":[],"content":":TS:Type:FunctionParameter Node\n→ represents a parameter of a :TS:Type:Function\n\nnot to be confused with :TS:Parameter which is exclusive for :TS:Function\n\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionindexposition of the parameter in the parameter list (zero-based)namename of the parameteroptional (boolean)indicates if the parameter is marked optional\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionOF_TYPE:TS:Type1type of the parameter"},"usage/Node---TS-Type-Intersection":{"title":"Node - TS Type Intersection","links":["usage/Node---TS-Type"],"tags":[],"content":":TS:Type:Intersection Node\n→ represents a intersection type\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionCONTAINS:TS:Type2..*constituent types of the intersection"},"usage/Node---TS-Type-Literal":{"title":"Node - TS Type Literal","links":[],"tags":[],"content":":TS:Type:Literal Node\n→ represents a literal type\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionvaluevalue of the literal (may be a string, number, or boolean)"},"usage/Node---TS-Type-NotIdentified":{"title":"Node - TS Type NotIdentified","links":["usage/Node---TS-Type"],"tags":[],"content":":TS:Type:NotIdentified Node\n→ represents a type that either cannot be represented by the other :TS:Type node types or that could not be parsed at all\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionidentifierstring representation of the type, or an error message"},"usage/Node---TS-Type-Object":{"title":"Node - TS Type Object","links":["usage/Node---TS-Type-ObjectMember"],"tags":[],"content":":TS:Type:Object Node\n→ represents an object type\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionHAS_MEMBER:TS:Type:ObjectMember0..*members of the object type (with references to their respective types)"},"usage/Node---TS-Type-ObjectMember":{"title":"Node - TS Type ObjectMember","links":["usage/Node---TS-Type-Object","usage/Node---TS-Type"],"tags":[],"content":":TS:Type:ObjectMember Node\n→ represents a member of an :TS:Type:Object\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionnamename of the memberoptional (boolean)indicates, if the member has been declared optional/nullable via a ? suffixreadonly (boolean)indicates, if the member has a readonly modifier\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionOF_TYPE:TS:Type1type of the member"},"usage/Node---TS-Type-Primitive":{"title":"Node - TS Type Primitive","links":[],"tags":[],"content":":TS:Type:Primitive Node\n→ represents a primitive type (e.g. undefined, number, string, etc.)\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionnamename of the primitive type"},"usage/Node---TS-Type-Tuple":{"title":"Node - TS Type Tuple","links":["usage/Node---TS-Type"],"tags":[],"content":":TS:Type:Tuple Node\n→ represents a tuple type\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionCONTAINS:TS:Type1..*types of the tuple itemsProperties:- index: position of the item in the tuple (zero-based)"},"usage/Node---TS-Type-TypeParameterReference":{"title":"Node - TS Type TypeParameterReference","links":["usage/Node---TS-TypeParameter"],"tags":[],"content":":TS:Type:TypeParameterReference Node\n→ represents a reference to a generic type that is defined in a type parameter list\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionnamename of the type parameter\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionREFERENCES:TS:TypeParameter1referenced type parameter"},"usage/Node---TS-Type-Union":{"title":"Node - TS Type Union","links":["usage/Node---TS-Type"],"tags":[],"content":":TS:Type:Union Node\n→ represents a union type\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionCONTAINS:TS:Type2..*constituent types of the union"},"usage/Node---TS-Type":{"title":"Node - TS Type","links":["usage/Node---TS-Type-Primitive","usage/Node---TS-Type-Declared","usage/Node---TS-Type-TypeParameterReference","usage/Node---TS-Type-Union","usage/Node---TS-Type-Intersection","usage/Node---TS-Type-Object","usage/Node---TS-Type-ObjectMember","usage/Node---TS-Type-Function","usage/Node---TS-Type-FunctionParameter","usage/Node---TS-Type-Literal","usage/Node---TS-Type-Tuple","usage/Node---TS-Type-NotIdentified"],"tags":[],"content":":TS:Type Node\n→ represents a TypeScript type\nOnly occurs as one of the following sub-variants:\n\n:TS:Type:Primitive\n:TS:Type:Declared\n:TS:Type:TypeParameterReference\n:TS:Type:Union\n:TS:Type:Intersection\n:TS:Type:Object with :TS:Type:ObjectMember\n:TS:Type:Function with :TS:Type:FunctionParameter\n:TS:Type:Literal\n:TS:Type:Tuple\n:TS:Type:NotIdentified\n"},"usage/Node---TS-TypeAlias":{"title":"Node - TS TypeAlias","links":["usage/Node-Properties---Fully-Qualified-Names","usage/Node-Properties---Code-Coordinates","usage/Node---TS-Type","usage/Node---TS-TypeParameter","usage/Node-Relation---Dependencies"],"tags":[],"content":":TS:TypeAlias Node\n→ represents a top-level TypeScript type alias declaration\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionglobalFqnglobal FQN of the type aliaslocalFqnlocal FQN of the type aliasnamename of the type aliascode coordinatescode coordinates of the type alias declaration (includes fileName)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionOF_TYPE:TS:Type1type that the type alias representsDECLARES:TS:TypeParameter0..*type parameters that are declared by the type alias for use in the represented typeDEPENDS_ONsee DEPENDS_ON - Target Nodes0..*dependencies of the type alias"},"usage/Node---TS-TypeParameter":{"title":"Node - TS TypeParameter","links":["usage/Node---TS-Function","usage/Node---TS-Method","usage/Node---TS-Type","usage/Node---TS-Type-Object"],"tags":[],"content":":TS:TypeParameter Node\n→ represents a type parameter for a generic :TS:Function or :TS:Method\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionnamename of the type parameterindexposition of the type parameter in the type parameter list (zero-based)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionCONSTRAINED_BY:TS:Type1type constraint for the type parameter (default: empty :TS:Type:Object)"},"usage/Node---TS-Value-Array":{"title":"Node - TS Value Array","links":["usage/Node---TS-Value"],"tags":[],"content":":TS:Value:Array Node\n→ represents an array value\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionCONTAINS:TS:Value0..*values of the individual array itemsProperties:- index: position of the item in the array (zero-based)"},"usage/Node---TS-Value-Call":{"title":"Node - TS Value Call","links":["usage/Node---TS-Value","usage/Node---TS-Type"],"tags":[],"content":":TS:Value:Call Node\n→ represents the return value of a function call of some value\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionCALLS:TS:Value1value on which the call is performed onHAS_ARGUMENT:TS:Value0..*arguments of the callProperties:- index: position of the argument in the parameter listHAS_TYPE_ARGUMENT:TS:Type0..*type arguments that are specified for generic callsProperties: - index: position of the type argument in the type parameter list (zero-based)"},"usage/Node---TS-Value-Class":{"title":"Node - TS Value Class","links":[],"tags":[],"content":":TS:Value:Class Node\n→ represents a class value\nExample:\nlet x = class {\n  // ...\n}"},"usage/Node---TS-Value-Complex":{"title":"Node - TS Value Complex","links":["usage/Node---TS-Value"],"tags":[],"content":":TS:Value:Complex Node\n→ represents values that cannot be represented via the other :TS:Value sub-variants\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionexpressionstring representation of the value’s expression"},"usage/Node---TS-Value-Declared":{"title":"Node - TS Value Declared","links":["usage/Node-Properties---Fully-Qualified-Names","usage/Node---TS-Variable","usage/Node---TS-Function","usage/Node---TS-Class","usage/Node---TS-Enum","usage/Node---TS-EnumMember","usage/Node---TS-ExternalDeclaration"],"tags":[],"content":":TS:Value:Declared Node\n→ represents a value that is declared somewhere else (i.e. a variable)\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionreferencedGlobalFqnglobal FQN of the value declaration that is referenced by the value node (this mainly serves as a convenience property to simplify queries)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionREFERENCES:TS:Variable:TS:Function:TS:Class:TS:Enum:TS:EnumMember:TS:ExternalDeclaration1declaration that defines the referenced value"},"usage/Node---TS-Value-Function":{"title":"Node - TS Value Function","links":[],"tags":[],"content":":TS:Value:Function Node\n→ represents a function value\nExamples:\nlet x = () =&gt; { \n  // ...\n};\nlet y = function() { \n  // ...\n};\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionarrowFunction (boolean)indicates, if the function uses the arrow syntax"},"usage/Node---TS-Value-Literal":{"title":"Node - TS Value Literal","links":[],"tags":[],"content":":TS:Value:Literal Node\n→ represents a literal value\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionvaluevalue of the literal (either a string, number or boolean)"},"usage/Node---TS-Value-Member":{"title":"Node - TS Value Member","links":["usage/Node---TS-Value"],"tags":[],"content":":TS:Value:Member Node\n→ represents a member relationship (i.e. the access of an object member via something like obj.member)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionPARENT:TS:Value1value of the parent of which a member is accessedMEMBER:TS:Value1value of the member"},"usage/Node---TS-Value-Null":{"title":"Node - TS Value Null","links":[],"tags":[],"content":":TS:Value:Null Node\n→ represents a null or undefined value\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionkindeither null or undefined"},"usage/Node---TS-Value-Object":{"title":"Node - TS Value Object","links":["usage/Node---TS-Value-ObjectMember"],"tags":[],"content":":TS:Value:Object Node\n→ represents an object value\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionHAS_MEMBER:TS:Value:ObjectMember0..*members of the object (with references to their respective values+)"},"usage/Node---TS-Value-ObjectMember":{"title":"Node - TS Value ObjectMember","links":["usage/Node---TS-Value-Object","usage/Node---TS-Value"],"tags":[],"content":":TS:Value:ObjectMember Node\n→ represents a member of a :TS:Value:Object\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionnamename of the object member\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionREFERENCES:TS:Value1value of the object member"},"usage/Node---TS-Value":{"title":"Node - TS Value","links":["usage/Node---TS-Value-Declared","usage/Node---TS-Value-Member","usage/Node---TS-Value-Object","usage/Node---TS-Value-ObjectMember","usage/Node---TS-Value-Array","usage/Node---TS-Value-Call","usage/Node---TS-Value-Function","usage/Node---TS-Value-Class","usage/Node---TS-Value-Null","usage/Node---TS-Value-Literal","usage/Node---TS-Value-Complex","usage/Node---TS-Type"],"tags":[],"content":":TS:Value Node\n→ represents a value (e.g. the initialization value of a variable)\nOnly occurs as one of the following sub-variants:\n\n:TS:Value:Declared\n:TS:Value:Member\n:TS:Value:Object with :TS:Value:ObjectMember\n:TS:Value:Array\n:TS:Value:Call\n:TS:Value:Function\n:TS:Value:Class\n:TS:Value:Null\n:TS:Value:Literal\n:TS:Value:Complex\n\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionOF_TYPE:TS:Type1type of the value"},"usage/Node---TS-Variable":{"title":"Node - TS Variable","links":["usage/Node-Properties---Fully-Qualified-Names","usage/Node-Properties---Code-Coordinates","usage/Node---TS-Type","usage/Node---TS-Value","usage/Node-Relation---Dependencies"],"tags":[],"content":":TS:Variable Node\n→ represents a top-level TypeScript variable/constant declaration\nProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionglobalFqnglobal FQN of the variablelocalFqnlocal FQN of the variablenamename of the variablekindtype of the variable declaration, i.e. var, let, or constcode coordinatescode coordinates of the variable declaration (includes fileName)\nRelations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameTarget Label(s)CardinalityDescriptionOF_TYPE:TS:Type1type of the variableINITIALIZED_WITH:TS:Value0..1initialization value of the variableDEPENDS_ONsee DEPENDS_ON - Target Nodes0..*dependencies of the variable"},"usage/Node-Properties---Code-Coordinates":{"title":"Node Properties - Code Coordinates","links":[],"tags":[],"content":"Code Coordinates\n→ set of node properties that describe the location of a code construct within a source code file\nProperties:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionfileNameabsolute path to the source file of the code construct (optional)startLinestarting line of the code constructstartColumnstarting column of the code constructendLineend line of the code constructendColumnend column of the code construct\n\nall line and column numbers start counting at 0\n"},"usage/Node-Properties---Fully-Qualified-Names":{"title":"Node Properties - Fully Qualified Names","links":["usage/Node---TS-Module","usage/Node---TS-Class","usage/Node---TS-ExternalDeclaration","usage/Node---TS-Method"],"tags":[],"content":"Fully Qualified Names (FQNs)\n→ node properties that uniquely identify a concept within or across projects\nProperties:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptionglobalFqnGlobal fully qualified name that uniquely identifies the code construct across all scanned projects.localFqnLocal fully qualified name that uniquely identifies the code construct within its containing project.This property mainly serves convenience purposes as it is shorter and, therefore, easier to handle than the globalFqn.In contrast to the globalFqn, this identifier is also independent of the machine\nglobalFqn Examples:\n\n/home/myuser/dev/my-project/src/my-module.ts for a :TS:Module\n&quot;/home/myuser/dev/my-project/src/my-module.ts&quot;.myClass for global declarations (like :TS:Class)\n&quot;some-package&quot;.someDeclaration for external declarations from Node.js packages (:TS:ExternalDeclaration)\n&quot;/home/myuser/dev/my-project/src/my-module.ts&quot;.myClass.someMethod for declaration members (like :TS:Method)\n\nlocalFqn Examples:\n\n./src/my-module.ts for a :TS:Module\n&quot;./src/my-module.ts&quot;.myClass for global declarations (like :TS:Class)\n&quot;some-package&quot;.someDeclaration for external declarations from Node.js packages (:TS:ExternalDeclaration)\n&quot;./src/my-module.ts&quot;.myClass.someMethod for declaration members (like :TS:Method)\n\n\n\n                  \n                  Note\n                  \n                \nFor declarations that are part of a index.ts(x) module, the module path ends with the containing directory, omitting the file name.\nE.g. a localFqn for the class MyClass in the file ./some/path/index.ts would look like &quot;./some/path&quot;.MyClass.\n"},"usage/Node-Relation---Dependencies":{"title":"Node Relation - Dependencies","links":["usage/Node---TS-Module","usage/Node---TS-Class","usage/Node---TS-Property","usage/Node---TS-Method","usage/Node---TS-AccessorProperty","usage/Node---TS-Interface","usage/Node---TS-TypeAlias","usage/Node---TS-Enum","usage/Node---TS-Variable","usage/Node---TS-Function","usage/Node---TS-JSXElementType","usage/Node---TS-ExternalModule","usage/Node---TS-ExternalDeclaration"],"tags":[],"content":"Dependencies (DEPENDS_ON)\n→ dependencies between the various language concepts are realized by the DEPENDS_ON relation\n\ndirect dependencies are registered on a statement/expression level and propagated upwards to the next language construct that is represented as a concept in the graph\n\nimport statements are ignored during this process which means declarations of unused imports will not be represented in the graph\n\n\nre-exports are resolved transitively as far as possible, that means dependencies are always targeting the original declaration, never some intermediary re-exporting module\nall registered direct dependencies of a concept are propagated/aggregated to all declaration levels above (see Propagation/Aggregation Strategy)\n\nProperties:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNameDescriptioncardinalitynumber of usages of the specific dependencies inside the language construct\nOrigin Nodes\n→ nodes from which DEPENDS_ON relationships can originate\nCore:\n\n:TS:Module\n:TS:Class\n:TS:Property\n:TS:Method\n:TS:AccessorProperty\n:TS:Interface\n:TS:TypeAlias\n:TS:Enum\n:TS:Variable\n:TS:Function\n\nReact Extension:\n\n:TS:JSXElementType\n\nTarget Nodes\n→ nodes to which DEPENDS_ON relationships can point to\n\n:TS:Module\n:TS:ExternalModule\n:TS:ExternalDeclaration\n:TS:Class\n:TS:Property\n:TS:Method\n:TS:AccessorProperty\n:TS:Interface\n:TS:TypeAlias\n:TS:Enum\n:TS:Variable\n:TS:Function\n\nPropagation/Aggregation Strategy\n→ dependencies that are registered at some level in the declaration hierarchy are registered on that level (e.g. at a property declaration) as well as on all the levels above (e.g. the containing class and module) where they are then aggregated with other existing dependencies\n\nthis is done for both origin, and target of the dependency\n\nExample:\na.ts\nexport class A {\n\trun(b: B): void {\n\t\tb.prop = 5;\n\t}\n}\nb.ts\nexport class B {\n\tpublic prop: number = 0;\n}\n\nThere are two direct dependencies that are detected in a.ts:\n\nthe class B is used once by the method run as the type for the parameter b\nthe property prop is used once by the method run in its assignment statement\n\n\n\nThe following propagations/aggregations take place:\n2. Target propagation:\n- the direct dependency to the method is propagated upwards to the class level where it is combined with the existing direct dependency to the class (leading to a combined cardinality of 2)\n- the dependency to the class (with the aggregated cardinality of 2) is propagated up once more to the module level\n3. Source propagation:\n- the previously calculated dependencies that originate from the method are now propagated up to its containing class and module respectively\n"},"usage/React-Extension":{"title":"React Extension","links":["usage/Node---TS-ReactComponent","usage/Node---TS-JSXElementType"],"tags":[],"content":"React Extension\n→ provides concepts specific to projects using React\nOverview:\n\n\n:TS:ReactComponent\n:TS:JSXElementType\n"}}